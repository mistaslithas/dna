function FornaContainer(a,b){function c(){var b=$(a).width(),c=$(a).height();j.options.svgW=b,j.options.svgH=c,n.range([0,b]).domain([0,b]),o.range([0,c]).domain([0,c]),zoomer.x(n).y(o),j.brusher.x(n).y(o),u.attr("width",b).attr("height",c),q.attr("width",b).attr("height",c),j.centerView()}function d(a,b,c){return a.hasOwnProperty(b.num)?(val=parseFloat(a[b.num]),isNaN(val)?a[b.num]:c(val)):"white"}function e(a){return a=y.selectAll("g.gnode"),a.filter(function(a){return a.selected})}function f(a){var b=a.radius+16,c=a.x-b,d=a.x+b,e=a.y-b,f=a.y+b;return function(b,g,h,i,j){if(b.point&&b.point!==a){var k=a.x-b.point.x,l=a.y-b.point.y,m=Math.sqrt(k*k+l*l),n=a.radius+b.point.radius;n>m&&(m=(m-n)/m*.1,a.x-=k*=m,a.y-=l*=m,b.point.x+=k,b.point.y+=l)}return g>d||c>i||h>f||e>j}}function g(){if(!j.deaf&&!A){switch(keyIsDown=!0,d3.event.keyCode){case 16:A=!0;break;case 17:B=!0;break;case 67:j.centerView()}(A||B)&&(t.call(zoomer).on("mousedown.zoom",null).on("touchstart.zoom",null).on("touchmove.zoom",null).on("touchend.zoom",null),w.selectAll("g.gnode").on("mousedown.drag",null)),B&&(v.select(".background").style("cursor","crosshair"),v.call(j.brusher))}}function h(){B=A=!1,v.call(j.brusher).on("mousedown.brush",null).on("touchstart.brush",null).on("touchmove.brush",null).on("touchend.brush",null),v.select(".background").style("cursor","auto"),t.call(zoomer),w.selectAll("g.gnode").call(C)}var j=this;if(j.options={displayAllLinks:!1,labelInterval:10,applyForce:!0,initialSize:[200,200],allowPanningAndZooming:!0},1<arguments.length)for(var k in b)j.options.hasOwnProperty(k)&&(j.options[k]=b[k]);j.options.svgW=j.options.initialSize[0],j.options.svgH=j.options.initialSize[1],d3.scale.category20();var l=null,m=null,n=d3.scale.linear().domain([0,j.options.svgW]).range([0,j.options.svgW]),o=d3.scale.linear().domain([0,j.options.svgH]).range([0,j.options.svgH]),p=j.graph={nodes:[],links:[]};j.linkStrengths={pseudoknot:0,proteinChain:0,chainChain:0,intermolecule:10,other:10},j.displayParameters={displayBackground:"false",displayNumbering:"true",displayNodeOutline:"true",displayNodeLabel:"true",displayLinks:"true",displayPseudoknotLinks:"true",displayProteinLinks:"true"},j.colorScheme="structure",j.customColors={},j.animation=j.options.applyForce,j.deaf=!1,j.rnas={},j.extraLinks=[],j.createInitialLayout=function(a,b){var c={sequence:"",name:"empty",positions:[],labelInterval:j.options.labelInterval,avoidOthers:!0,circularizeExternal:!0};if(2==arguments.length)for(var d in b)c.hasOwnProperty(d)&&(c[d]=b[d]);return rg=new RNAGraph(c.sequence,a,c.name),rg.circularizeExternal=c.circularizeExternal,rnaJson=rg.recalculateElements(),0===c.positions.length&&(c.positions=simpleXyCoordinates(rnaJson.pairtable)),rnaJson=rnaJson.elementsToJson().addPositions("nucleotide",c.positions).addLabels(1,c.labelInterval).reinforceStems().reinforceLoops().connectFakeNodes()},j.addRNA=function(a,b){var c=j.createInitialLayout(a,b);return 1===arguments.length&&(b={}),"avoidOthers"in b?j.addRNAJSON(c,b.avoidOthers):j.addRNAJSON(c,!0),c},j.addRNAJSON=function(a,b){var c,d;b&&(c=0<j.graph.nodes.length?d3.max(j.graph.nodes.map(function(a){return a.x})):0,d=d3.min(a.nodes.map(function(a){return a.x})),a.nodes.forEach(function(a){a.x+=c-d,a.px+=c-d})),a.nodes.forEach(function(b){b.rna=a}),j.rnas[a.uid]=a,j.recalculateGraph(),j.update(),j.centerView()},j.transitionRNA=function(a,b,c){a=j.createInitialLayout(b,c),y.selectAll("g.gnode").data(a).transition().attr("transform",function(a){return"translate("+[a.x,a.y]+")"}).duration(1e3)},j.recalculateGraph=function(a){j.graph.nodes=[],j.graph.links=[];for(var b in j.rnas)j.graph.nodes=j.graph.nodes.concat(j.rnas[b].nodes),j.graph.links=j.graph.links.concat(j.rnas[b].links);for(var c={},d=0;d<j.graph.nodes.length;d++)c[j.graph.nodes[d].uid]=j.graph.nodes[d];for(j.graph.links.forEach(function(a){a.source=c[a.source.uid],a.target=c[a.target.uid]}),d=0;d<j.extraLinks.length;d++){if(j.extraLinks[d].target.uid in c||console.log("not there:",j.extraLinks[d]),j.extraLinks[d].source=c[j.extraLinks[d].source.uid],j.extraLinks[d].target=c[j.extraLinks[d].target.uid],"intermolecule"==j.extraLinks[d].linkType)for(fakeLinks=j.graph.links.filter(function(a){return(a.source==j.extraLinks[d].source||a.source==j.extraLinks[d].target||a.target==j.extraLinks[d].source||a.target==j.extraLinks[d].source)&&"fake"==a.linkType}),a=0;a<fakeLinks.length;a++)b=j.graph.links.indexOf(fakeLinks[a]),j.graph.links.splice(b,1);p.links.push(j.extraLinks[d])}},j.addNodes=function(a){a.links.forEach(function(b){"number"==typeof b.source&&(b.source=a.nodes[b.source]),"number"==typeof b.target&&(b.target=a.nodes[b.target])}),0<j.graph.nodes.length?(maxX=d3.max(j.graph.nodes.map(function(a){return a.x})),maxY=d3.max(j.graph.nodes.map(function(a){return a.y}))):maxY=maxX=0,a.nodes.forEach(function(a){a.rna.uid in j.rnas||(j.rnas[a.rna.uid]=a.rna),a.x+=maxX,a.px+=maxX}),r=new RNAGraph("",""),r.nodes=a.nodes,r.links=a.links,j.recalculateGraph(),j.update(),j.centerView()},j.addCustomColors=function(a){j.customColors=a},j.clearNodes=function(){j.graph.nodes=[],j.graph.links=[],j.rnas={},j.extraLinks=[],j.update()},j.toJSON=function(){return JSON.stringify({rnas:j.rnas,extraLinks:j.extraLinks},function(a,b){return"rna"!=a?b:void 0},"	")},j.fromJSON=function(a){try{var b=JSON.parse(a),c=b.rnas,d=b.extraLinks}catch(e){throw e}for(uid in c)"rna"==c[uid].type?(r=new RNAGraph,r.seq=c[uid].seq,r.dotbracket=c[uid].dotbracket,r.circular=c[uid].circular,r.pairtable=c[uid].pairtable,r.uid=c[uid].uid,r.structName=c[uid].structName,r.nodes=c[uid].nodes,r.links=c[uid].links,r.rnaLength=c[uid].rnaLength,r.elements=c[uid].elements,r.nucsToNodes=c[uid].nucsToNodes,r.pseudoknotPairs=c[uid].pseudoknotPairs):(r=new ProteinGraph,r.size=c[uid].size,r.nodes=c[uid].nodes,r.uid=c[uid].uid),j.addRNAJSON(r,!1);d.forEach(function(a){j.extraLinks.push(a)}),j.recalculateGraph(),j.update()},j.changeColorScheme=function(a){y.selectAll("[node_type=protein]").classed("protein",!0).attr("r",function(a){return a.radius}),y.selectAll("g.gnode"),y.selectAll("g.gnode").selectAll("circle");var b=y.selectAll("g.gnode").select("[node_type=nucleotide]");j.colorScheme=a,"sequence"==a?(scale=d3.scale.ordinal().range(["#dbdb8d","#98df8a","#ff9896","#aec7e8","#aec7e8"]).domain(["A","C","G","U","T"]),b.style("fill",function(a){return scale(a.name)})):"structure"==a?(scale=d3.scale.category10().domain("smiethx".split("")).range("lightgreen #ff9896 #dbdb8d lightsalmon lightcyan lightblue transparent".split(" ")),b.style("fill",function(a){return scale(a.elemType)})):"positions"==a?b.style("fill",function(a){return scale=d3.scale.linear().range(["#98df8a","#dbdb8d","#ff9896"]).interpolate(d3.interpolateLab).domain([1,1+(a.rna.rnaLength-1)/2,a.rna.rnaLength]),scale(a.num)}):"custom"==a&&(scale=d3.scale.linear().interpolate(d3.interpolateLab).domain(j.customColors.domain).range(j.customColors.range),b.style("fill",function(a){return"undefined"==typeof j.customColors?"white":j.customColors.colorValues.hasOwnProperty(a.structName)&&j.customColors.colorValues[a.structName].hasOwnProperty(a.num)?(moleculeColors=j.customColors.colorValues[a.structName],d(moleculeColors,a,scale)):j.customColors.colorValues.hasOwnProperty("")?(moleculeColors=j.customColors.colorValues[""],to_change=d(moleculeColors,a,scale)):"white"}))},window.addEventListener("resize",c,!1),zoomer=d3.behavior.zoom().scaleExtent([.1,10]).x(n).y(o).on("zoomstart",function(){var a=y.selectAll("g.gnode").selectAll(".outlineNode");a.each(function(a){a.selected=!1,a.previouslySelected=!1}),a.classed("selected",!1)}).on("zoom",function(){w.attr("transform","translate("+d3.event.translate+") scale("+d3.event.scale+")")}),d3.select(a).select("svg").remove();var q=d3.select(a).attr("tabindex",1).on("keydown.brush",g).on("keyup.brush",h).each(function(){this.focus()}).append("svg:svg").attr("width",j.options.svgW).attr("height",j.options.svgH).attr("id","plotting-area"),s=q.append("svg:style");$.get(j.options.cssFileLocation,function(a){s.text(a.replace(/[\s\n]/g,""))}),j.options.svg=q;var t=q.append("svg:g").on("mousemove",function(){l&&(mpos=d3.mouse(w.node()),z.attr("x1",l.x).attr("y1",l.y).attr("x2",mpos[0]).attr("y2",mpos[1]))}).on("mousedown",function(){}).on("mouseup",function(){l&&z.attr("class","dragLineHidden"),m=l=null});j.options.allowPanningAndZooming&&t.call(zoomer);var u=t.append("svg:rect").attr("width",j.options.svgW).attr("height",j.options.svgH).attr("id","zrect"),v=t.append("g").datum(function(){return{selected:!1,previouslySelected:!1}}).attr("class","brush"),w=t.append("svg:g"),x=w.append("svg:g"),y=w.append("svg:g");j.brusher=d3.svg.brush().x(n).y(o).on("brushstart",function(a){y.selectAll("g.gnode").selectAll(".outlineNode").each(function(a){a.previouslySelected=B&&a.selected})}).on("brush",function(){var a=y.selectAll("g.gnode").selectAll(".outlineNode"),b=d3.event.target.extent();a.classed("selected",function(a){return a.selected=j.options.applyForce&&a.previouslySelected^(b[0][0]<=a.x&&a.x<b[1][0]&&b[0][1]<=a.y&&a.y<b[1][1])})}).on("brushend",function(){d3.event.target.clear(),d3.select(this).call(d3.event.target)}),v.call(j.brusher).on("mousedown.brush",null).on("touchstart.brush",null).on("touchmove.brush",null).on("touchend.brush",null),v.select(".background").style("cursor","auto"),j.centerView=function(){0!==j.graph.nodes.length&&(minX=d3.min(j.graph.nodes.map(function(a){return a.x})),minY=d3.min(j.graph.nodes.map(function(a){return a.y})),maxX=d3.max(j.graph.nodes.map(function(a){return a.x})),maxY=d3.max(j.graph.nodes.map(function(a){return a.y})),molWidth=maxX-minX,molHeight=maxY-minY,widthRatio=j.options.svgW/(molWidth+1),heightRatio=j.options.svgH/(molHeight+1),minRatio=.8*Math.min(widthRatio,heightRatio),newMolWidth=molWidth*minRatio,newMolHeight=molHeight*minRatio,xTrans=-minX*minRatio+(j.options.svgW-newMolWidth)/2,yTrans=-minY*minRatio+(j.options.svgH-newMolHeight)/2,w.attr("transform","translate("+[xTrans,yTrans]+") scale("+minRatio+")"),zoomer.translate([xTrans,yTrans]),zoomer.scale(minRatio))},j.force=d3.layout.force().charge(function(a){return-30}).chargeDistance(300).friction(.35).linkDistance(function(a){return 15*a.value}).linkStrength(function(a){return a.linkType in j.linkStrengths?j.linkStrengths[a.linkType]:j.linkStrengths.other}).gravity(0).nodes(j.graph.nodes).links(j.graph.links).chargeDistance(110).size([j.options.svgW,j.options.svgH]);var z=w.append("line").attr("class","dragLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",0),A=!1,B=!1;j.resumeForce=function(){j.animation&&j.force.resume()};var C=d3.behavior.drag().on("dragstart",function(a){d3.event.sourceEvent.stopPropagation(),a.selected||B||y.selectAll("g.gnode").selectAll(".outline_node").classed("selected",function(a){return a.selected=j.options.applyForce&&(a.previouslySelected=!1)}),d3.select(this).select(".outline_node").classed("selected",function(b){return a.previouslySelected=a.selected,a.selected=j.options.applyForce&&!0}),e(a).each(function(a){a.fixed|=2})}).on("drag",function(a){e(a).each(function(a){a.x+=d3.event.dx,a.y+=d3.event.dy,a.px+=d3.event.dx,a.py+=d3.event.dy}),j.resumeForce(),d3.event.sourceEvent.preventDefault()}).on("dragend",function(a){e(a).each(function(a){a.fixed&=-7})});d3.select(a).on("keydown",g).on("keyup",h).on("contextmenu",function(){d3.event.preventDefault()}),linkKey=function(a){return a.uid},nodeKey=function(a){return key=a.uid},updateRnaGraph=function(a){var b=a.getPositions("nucleotide"),c=a.getPositions("label"),d=a.getUids();a.recalculateElements().elementsToJson().addPseudoknots().addPositions("nucleotide",b).addUids(d).addLabels(1,j.options.labelInterval).addPositions("label",c).reinforceStems().reinforceLoops().updateLinkUids()},removeLink=function(a){if(index=j.graph.links.indexOf(a),-1<index){if(a.source.rna==a.target.rna){var b=a.source.rna;b.addPseudoknots(),b.pairtable[a.source.num]=0,b.pairtable[a.target.num]=0,updateRnaGraph(b)}else extraLinkIndex=j.extraLinks.indexOf(a),j.extraLinks.splice(extraLinkIndex,1);j.recalculateGraph()}j.update()},linkClick=function(a){A&&(a.linkType in{backbone:!0,fake:!0,fakeFake:!0,labelLink:!0}||removeLink(a))},j.addLink=function(a){a.source.rna==a.target.rna?(r=a.source.rna,r.pairtable[a.source.num]=a.target.num,r.pairtable[a.target.num]=a.source.num,updateRnaGraph(r)):(a.linkType="intermolecule",j.extraLinks.push(a)),j.recalculateGraph(),j.update()},nodeMouseclick=function(a){d3.event.defaultPrevented||(B||y.selectAll("g.gnode").selectAll(".outline_node").classed("selected",function(a){return a.selected=j.options.applyForce&&(a.previouslySelected=!1)}),d3.select(this).select("circle").classed("selected",a.selected=j.options.applyForce&&!a.previouslySelected))},nodeMouseup=function(a){if(l)if(m=a,m==l)m=l=null;else{for(a={source:l,target:m,linkType:"basepair",value:1,uid:generateUUID()},i=0;i<j.graph.links.length;i++){if(!(j.graph.links[i].source!=l&&j.graph.links[i].target!=l&&j.graph.links[i].source!=m&&j.graph.links[i].target!=m||"basepair"!=j.graph.links[i].linkType&&"pseudoknot"!=j.graph.links[i].linkType))return;if((j.graph.links[i].source==m&&j.graph.links[i].target==l||j.graph.links[i].source==l&&j.graph.links[i].target==m)&&"backbone"==j.graph.links[i].linkType)return}"middle"!=m.nodeType&&"middle"!=l.nodeType&&"label"!=m.nodeType&&"label"!=l.nodeType&&j.addLink(a)}},nodeMousedown=function(a){a.selected||B||y.selectAll("g.gnode").selectAll(".outlineNode").classed("selected",function(a){return a.selected=a.previouslySelected=!1}),d3.select(this).classed("selected",function(b){return a.previouslySelected=a.selected,a.selected=j.options.applyForce&&!0}),A&&(l=a,z.attr("class","drag_line").attr("x1",l.x).attr("y1",l.y).attr("x2",l.x).attr("y2",l.y))},j.startAnimation=function(){j.animation=!0,w.selectAll("g.gnode").call(C),j.force.start()},j.stopAnimation=function(){j.animation=!1,w.selectAll("g.gnode").on("mousedown.drag",null),j.force.stop()},j.setFriction=function(a){j.force.friction(a),j.resumeForce()},j.setCharge=function(a){j.force.charge(a),j.resumeForce()},j.setGravity=function(a){j.force.gravity(a),j.resumeForce()},j.setPseudoknotStrength=function(a){j.linkStrengths.pseudoknot=a,j.update()},j.displayBackground=function(a){j.displayParameters.displayBackground=a,j.updateStyle()},j.displayNumbering=function(a){j.displayParameters.displayNumbering=a,j.updateStyle()},j.displayNodeOutline=function(a){j.displayParameters.displayNodeOutline=a,j.updateStyle()},j.displayNodeLabel=function(a){j.displayParameters.displayNodeLabel=a,j.updateStyle()},j.displayLinks=function(a){j.displayParameters.displayLinks=a,j.updateStyle()},j.displayPseudoknotLinks=function(a){j.displayParameters.displayPseudoknotLinks=a,j.updateStyle()},j.displayProteinLinks=function(a){j.displayParameters.displayProteinLinks=a,j.updateStyle()},j.updateStyle=function(){u.classed("transparent",!j.displayParameters.displayBackground),y.selectAll("[node_type=label]").classed("transparent",!j.displayParameters.displayNumbering),y.selectAll("[label_type=label]").classed("transparent",!j.displayParameters.displayNumbering),x.selectAll("[link_type=label_link]").classed("transparent",!j.displayParameters.displayNumbering),q.selectAll("circle").classed("hidden_outline",!j.displayParameters.displayNodeOutline),y.selectAll("[label_type=nucleotide]").classed("transparent",!j.displayParameters.displayNodeLabel),q.selectAll("[link_type=real],[link_type=basepair],[link_type=backbone],[link_type=pseudoknot],[link_type=protein_chain],[link_type=chain_chain]").classed("transparent",!j.displayParameters.displayLinks),q.selectAll("[link_type=pseudoknot]").classed("transparent",!j.displayParameters.displayPseudoknotLinks),q.selectAll("[link_type=protein_chain]").classed("transparent",!j.displayParameters.displayProteinLinks),x.selectAll("[link_type=fake]").classed("transparent",!j.options.displayAllLinks)},j.update=function(){j.force.nodes(j.graph.nodes).links(j.graph.links),j.animation&&j.force.start();var a=x.selectAll("line.link").data(j.graph.links,linkKey);linkLines=a.enter().append("svg:line"),linkLines.append("svg:title").text(linkKey),linkLines.classed("link",!0).attr("x1",function(a){return a.source.x}).attr("y1",function(a){return a.source.y}).attr("x2",function(a){return a.target.x}).attr("y2",function(a){return a.target.y}).attr("link_type",function(a){return a.linkType}).attr("class",function(a){return d3.select(this).attr("class")+" "+a.linkType}).attr("pointer-events",function(a){return"fake"==a.linkType?"none":"all"}),a.attr("class","").classed("link",!0).attr("link_type",function(a){return a.linkType}).attr("class",function(a){return d3.select(this).attr("class")+" "+a.linkType}),a.exit().remove(),xlink=j.displayFakeLinks?a:x.selectAll("[link_type=real],[link_type=pseudoknot],[link_type=protein_chain],[link_type=chain_chain],[link_type=label_link],[link_type=backbone],[link_type=basepair],[link_type=fake],[link_type=intermolecule]"),domain=[0,1,2,3,4,5,6,7,8,9],d3.scale.category10().domain(domain);var b=y.selectAll("g.gnode").data(j.graph.nodes,nodeKey);gnodesEnter=b.enter().append("g").classed("noselect",!0).classed("gnode",!0).attr("struct_name",function(a){return a.structName}).attr("transform",function(a){return"undefined"!=typeof a.x&&"undefined"!=typeof a.y?"translate("+[a.x,a.y]+")":""}).each(function(a){a.selected=a.previouslySelected=!1}),gnodesEnter.call(C).on("mousedown",nodeMousedown).on("mousedrag",function(a){}).on("mouseup",nodeMouseup).on("click",nodeMouseclick).transition().duration(750).ease("elastic").attr("r",6.5),nodeTooltip=function(a){return nodeTooltips={},nodeTooltips.nucleotide=a.num,nodeTooltips.label="",nodeTooltips.pseudo="",nodeTooltips.middle="",nodeTooltips.protein=a.structName,nodeTooltips[a.nodeType]},xlink.on("click",linkClick),b.select("circle"),gnodesEnter.filter(function(a){return"nucleotide"==a.nodeType||"label"==a.nodeType||"protein"==a.nodeType}).append("svg:circle").attr("class","outline_node").attr("r",function(a){return a.radius+1});var c=d3.max(j.graph.nodes,function(a){return a.num});a=gnodesEnter.append("svg:circle").attr("class","node").classed("label",function(a){return"label"==a.nodeType}).attr("r",function(a){return"middle"==a.nodeType?0:a.radius}).attr("node_type",function(a){return a.nodeType}),gnodesEnter.append("text").text(function(a){return 1==a.num?"5'":a.num==c?"3'":void 0}).style({fill:"#999","font-size":8}).style("transform","translate(-3px,-10px)"),gnodesEnter.append("text").text(function(a){return a.name}).attr("text-anchor","middle").attr("font-size",8).attr("font-weight","bold").attr("y",2.5).attr("class","node-label").attr("label_type",function(a){return a.nodeType}).append("svg:title").text(function(a){return"nucleotide"==a.nodeType?a.structName+":"+a.num:""}),a.append("svg:title").text(function(a){return"nucleotide"==a.nodeType?a.structName+":"+a.num:""}),b.exit().remove(),realNodes=j.graph.nodes.filter(function(a){return"nucleotide"==a.nodeType||"label"==a.nodeType}),j.force.on("tick",function(){for(var a=d3.geom.quadtree(realNodes),c=0,d=realNodes.length;++c<d;)a.visit(f(realNodes[c]));xlink.attr("x1",function(a){return a.source.x}).attr("y1",function(a){return a.source.y}).attr("x2",function(a){return a.target.x}).attr("y2",function(a){return a.target.y}),b.attr("transform",function(a){return"translate("+[a.x,a.y]+")"})}),j.changeColorScheme(j.colorScheme),j.animation&&j.force.start(),j.updateStyle()},c()}function generateUUID(){var a=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(b){var c=(a+16*Math.random())%16|0;return a=Math.floor(a/16),("x"==b?c:3&c|8).toString(16)})}function isNormalInteger(a){return/^\+?(0|[1-9]\d*)$/.test(a)}function ColorScheme(a){var b=this;return b.colorsText=a,b.parseRange=function(a){for(var b=a.split(","),c=[],d=0;d<b.length;d++){var e=b[d].split("-");if(1==e.length)c.push(parseInt(e[0]));else if(2==e.length)for(var f=parseInt(e[0]),e=parseInt(e[1]);e>=f;f++)c.push(f);else console.log("Malformed range (too many dashes):",a)}return c},b.parseColorText=function(a){a=a.split("\n");for(var c="",d=1,e={colorValues:{"":{}},range:["white","steelblue"]},f=[],g=0;g<a.length;g++)if(">"==a[g][0])c=a[g].trim().slice(1),d=1,e.colorValues[c]={};else{words=a[g].trim().split(/[\s]+/);for(var h=0;h<words.length;h++)if(isNaN(words[h]))if(0===words[h].search("range"))parts=words[h].split("="),partsRight=parts[1].split(":"),e.range=[partsRight[0],partsRight[1]];else if(0==words[h].search("domain"))parts=words[h].split("="),partsRight=parts[1].split(":"),e.domain=[partsRight[0],partsRight[1]];else{parts=words[h].split(":"),nums=b.parseRange(parts[0]),color=parts[1];for(var i=0;i<nums.length;i++)isNaN(color)?e.colorValues[c][nums[i]]=color:(e.colorValues[c][nums[i]]=+color,f.push(Number(color)))}else e.colorValues[c][d]=Number(words[h]),d+=1,f.push(Number(words[h]))}return"domain"in e||(e.domain=[Math.min.apply(null,f),Math.max.apply(null,f)]),b.colorsJson=e,b},b.normalizeColors=function(){var a,c;for(c in b.colorsJson){var d,e=Number.MAX_VALUE,f=Number.MIN_VALUE;for(d in b.colorsJson.colorValues[c])a=b.colorsJson.colorValues[c][d],"number"==typeof a&&(e>a&&(e=a),a>f&&(f=a));for(d in b.colorsJson.colorValues[c])a=b.colorsJson.colorValues[c][d],"number"==typeof a&&(b.colorsJson.colorValues[c][d]=(a-e)/(f-e))}return b},b.parseColorText(b.colorsText),b}function ProteinGraph(a,b,c){var d=this;d.type="protein",d.size=b,d.nodes=[{name:"P",num:1,radius:3*Math.sqrt(b),rna:d,nodeType:"protein",structName:a,elemType:"p",size:b,uid:generateUUID()}],d.links=[],d.uid=generateUUID(),d.addUids=function(a){for(var b=0;b<a.length;b++)d.nodes[b].uid=a[b];return d},d.getUids=function(){uids=[];for(var a=0;a<d.dotbracket.length;a++)uids.push(d.nodes[a].uid);return uids}}function RNAGraph(a,b,d){var e=this;e.type="rna",e.circularizeExternal=!1,0==arguments.length?(e.seq="",e.dotbracket="",e.structName=""):(e.seq=a,e.dotbracket=b,e.structName=d),e.circular=!1,0<e.dotbracket.length&&"*"==e.dotbracket[e.dotbracket.length-1]&&(e.dotbracket=e.dotbracket.slice(0,e.dotbracket.length-1),e.circular=!0),e.uid=generateUUID(),e.rnaLength=e.dotbracket.length,e.elements=[],e.pseudoknotPairs=[],e.nucsToNodes={},e.addUids=function(a){for(var b=0;b<a.length;b++)e.nodes[b].uid=a[b];return e},e.computePairtable=function(){e.pairtable=rnaUtilities.dotbracketToPairtable(e.dotbracket)},e.computePairtable(),e.addPositions=function(a,b){labelNodes=e.nodes.filter(function(b){return b.nodeType==a});for(var c=0;c<labelNodes.length;c++)labelNodes[c].x=b[c][0],labelNodes[c].px=b[c][0],labelNodes[c].y=b[c][1],labelNodes[c].py=b[c][1];return e},e.getPositions=function(a){positions=[],nucleotideNodes=e.nodes.filter(function(b){return b.nodeType==a});for(var b=0;b<nucleotideNodes.length;b++)positions.push([nucleotideNodes[b].x,nucleotideNodes[b].y]);return positions},e.getUids=function(){uids=[];for(var a=0;a<e.dotbracket.length;a++)uids.push(e.nodes[a].uid);return uids},e.reinforceStems=function(){pt=e.pairtable,relevantElements=elements.filter(function(a){return"s"==a[0]&&4<=a[2].length});for(var a=0;a<relevantElements.length;a++){allNucs=relevantElements[a][2],nucs=allNucs.slice(0,allNucs.length/2);for(var b=0;b<nucs.length-1;b++)e.addFakeNode([nucs[b],nucs[b+1],pt[nucs[b+1]],pt[nucs[b]]])}return e},e.reinforceLoops=function(){var a=function(a){return 0!==a&&a<=e.dotbracket.length};for(i=0;i<e.elements.length;i++)if("s"!=e.elements[i][0]&&(e.circularizeExternal||"e"!=e.elements[i][0])){var b=e.elements[i][2].filter(a);if("e"==e.elements[i][0]){var c={name:"",num:-1,radius:0,rna:e,nodeType:"middle",elemType:"f",nucs:[],x:e.nodes[e.rnaLength-1].x,y:e.nodes[e.rnaLength-1].y,px:e.nodes[e.rnaLength-1].px,py:e.nodes[e.rnaLength-1].py,uid:generateUUID()},d={name:"",num:-1,radius:0,rna:e,nodeType:"middle",elemType:"f",nucs:[],x:e.nodes[0].x,y:e.nodes[0].y,px:e.nodes[0].px,py:e.nodes[0].py,uid:generateUUID()};b.push(e.nodes.length+1),b.push(e.nodes.length+2),e.nodes.push(c),e.nodes.push(d)}e.addFakeNode(b)}return e},e.updateLinkUids=function(){for(var a=0;a<e.links.length;a++)e.links[a].uid=e.links[a].source.uid+e.links[a].target.uid;return e},e.addFakeNode=function(a){for(var b=6.283/(2*a.length),b=18/(2*Math.tan(b)),d="",f=0;f<a.length;f++)d+=e.nodes[a[f]-1].uid;for(newNode={name:"",num:-1,radius:b,rna:e,nodeType:"middle",elemType:"f",nucs:a,uid:d},e.nodes.push(newNode),coordsCounted=newY=newX=0,b=3.14159*(a.length-2)/(2*a.length),b=.5/Math.cos(b),j=0;j<a.length;j++)0===a[j]||a[j]>e.dotbracket.length||(e.links.push({source:e.nodes[a[j]-1],target:e.nodes[e.nodes.length-1],linkType:"fake",value:b,uid:generateUUID()}),4<a.length&&e.links.push({source:e.nodes[a[j]-1],target:e.nodes[a[(j+Math.floor(a.length/2))%a.length]-1],linkType:"fake",value:2*b,uid:generateUUID()}),ia=3.14159*(a.length-2)/a.length,c=2*Math.cos(1.570795-ia/2),e.links.push({source:e.nodes[a[j]-1],target:e.nodes[a[(j+2)%a.length]-1],linkType:"fake",value:c}),fromNode=e.nodes[a[j]-1],"x"in fromNode&&(newX+=fromNode.x,newY+=fromNode.y,coordsCounted+=1));return 0<coordsCounted&&(newNode.x=newX/coordsCounted,newNode.y=newY/coordsCounted,newNode.px=newNode.x,newNode.py=newNode.y),e},e.connectFakeNodes=function(){for(var a={},b=e.nodes.filter(function(a){return"middle"==a.nodeType}),c=new Set,d=1;d<=e.nodes.length;d++)a[d]=[];for(d=0;d<b.length;d++)for(var f=b[d],g=0;g<f.nucs.length;g++){for(var h=f.nucs[g],i=0;i<a[h].length;i++)c.has(JSON.stringify([a[h][i].uid,f.uid].sort()))||(e.links.push({source:a[h][i],target:f,value:(a[h][i].radius+f.radius)/18,linkType:"fake_fake"}),c.add(JSON.stringify([a[h][i].uid,f.uid].sort())));a[h].push(f)}return e},e.elementsToJson=function(){pt=e.pairtable,elements=e.elements,e.nodes=[],e.links=[],elemTypes={},e.elements.sort();for(var a=0;a<e.elements.length;a++)for(nucs=e.elements[a][2],j=0;j<nucs.length;j++)elemTypes[nucs[j]]=e.elements[a][0];for(a=1;a<=pt[0];a++)e.nodes.push({name:e.seq[a-1],num:a,radius:6,rna:e,nodeType:"nucleotide",structName:e.structName,elemType:elemTypes[a],uid:generateUUID()});for(a=1;a<=pt[0];a++)0!==pt[a]&&e.links.push({source:e.nodes[a-1],target:e.nodes[pt[a]-1],linkType:"basepair",value:1,uid:generateUUID()}),a>1&&e.links.push({source:e.nodes[a-2],target:e.nodes[a-1],linkType:"backbone",value:1,uid:generateUUID()});for(a=0;a<e.pseudoknotPairs.length;a++)e.links.push({source:e.nodes[e.pseudoknotPairs[a][0]-1],target:e.nodes[e.pseudoknotPairs[a][1]-1],linkType:"pseudoknot",value:1,uid:generateUUID()});return e.circular&&e.links.push({source:e.nodes[0],target:e.nodes[e.rnaLength-1],linkType:"backbone",value:1,uid:generateUUID()}),e},e.ptToElements=function(a,b,c,d){var f=[],g=[c-1],h=[d+1];if(c>d)return[];for(;0===a[c];c++)g.push(c);for(;0===a[d];d--)h.push(d);if(c>d)return g.push(c),0===b?[["e",b,g.sort(numberSort)]]:[["h",b,g.sort(numberSort)]];if(a[c]!=d){for(g.push(c);d>=c;){for(f=f.concat(e.ptToElements(a,b,c,a[c])),g.push(a[c]),c=a[c]+1;0===a[c]&&d>=c;c++)g.push(c);g.push(c)}return g.pop(),g=g.concat(h),0<g.length&&(0===b?f.push(["e",b,g.sort(numberSort)]):f.push(["m",b,g.sort(numberSort)])),f}for(a[c]===d&&(g.push(c),h.push(d),combined=g.concat(h),4<combined.length&&(0===b?f.push(["e",b,g.concat(h).sort(numberSort)]):f.push(["i",b,g.concat(h).sort(numberSort)]))),h=[];a[c]===d&&d>c;)h.push(c),h.push(d),c+=1,--d,b+=1;return f.push(["s",b,h.sort(numberSort)]),f.concat(e.ptToElements(a,b,c,d))},e.addLabels=function(a,b){if(0===arguments.length&&(a=1,b=10),1===arguments.length&&(b=10),0===b)return e;for(0>=b&&console.log("The label interval entered in invalid:",b),i=1;i<=pt[0];i++)if(0===i%b){var c,d;thisNode=e.nodes[i-1],1==e.rnaLength?(nextVec=[thisNode.x-15,thisNode.y],prevVec=[thisNode.x-15,thisNode.y]):(prevNode=1==i?e.nodes[e.rnaLength-1]:e.nodes[i-2],nextNode=i==e.rnaLength?e.nodes[0]:e.nodes[i],0!==e.pairtable[nextNode.num]&&0!==e.pairtable[prevNode.num]&&0!==e.pairtable[thisNode.num]&&(prevNode=nextNode=e.nodes[e.pairtable[thisNode.num]-1]),0===e.pairtable[thisNode.num]||0!==e.pairtable[nextNode.num]&&0!==e.pairtable[prevNode.num]?(nextVec=[nextNode.x-thisNode.x,nextNode.y-thisNode.y],prevVec=[prevNode.x-thisNode.x,prevNode.y-thisNode.y]):(nextVec=[thisNode.x-nextNode.x,thisNode.y-nextNode.y],prevVec=[thisNode.x-prevNode.x,thisNode.y-prevNode.y])),combinedVec=[nextVec[0]+prevVec[0],nextVec[1]+prevVec[1]],vecLength=Math.sqrt(combinedVec[0]*combinedVec[0]+combinedVec[1]*combinedVec[1]),normedVec=[combinedVec[0]/vecLength,combinedVec[1]/vecLength],offsetVec=[-15*normedVec[0],-15*normedVec[1]],c=e.nodes[i-1].x+offsetVec[0],d=e.nodes[i-1].y+offsetVec[1],newNode={name:i+a-1,num:-1,radius:6,rna:e,nodeType:"label",structName:e.structName,elemType:"l",x:c,y:d,px:c,py:d,uid:generateUUID()},newLink={source:e.nodes[i-1],target:newNode,value:1,linkType:"label_link",uid:generateUUID()},e.nodes.push(newNode),e.links.push(newLink)}return e},e.recalculateElements=function(){if(e.removePseudoknots(),e.elements=e.ptToElements(e.pairtable,0,1,e.dotbracket.length),e.circular&&(externalLoop=e.elements.filter(function(a){return"e"==a[0]?!0:void 0}),0<externalLoop.length)){eloop=externalLoop[0],nucs=eloop[2].sort(numberSort),prev=nucs[0],hloop=!0,numGreater=0;for(var a=1;a<nucs.length;a++)1<nucs[a]-prev&&(numGreater+=1),prev=nucs[a];eloop[0]=1==numGreater?"h":2==numGreater?"i":"m"}return e},e.removePseudoknots=function(){return 1<e.pairtable.length&&(e.pseudoknotPairs=e.pseudoknotPairs.concat(rnaUtilities.removePseudoknotsFromPairtable(e.pairtable))),e},e.addPseudoknots=function(){var a=e.pairtable,b=e.pseudoknotPairs;for(i=0;i<b.length;i++)a[b[i][0]]=b[i][1],a[b[i][1]]=b[i][0];return e.pseudoknotPairs=[],e},0<e.rnaLength&&e.recalculateElements()}function RNAUtilities(){var b=this;b.bracket_left="([{<ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),b.bracket_right=")]}>abcdefghijklmnopqrstuvwxyz".split(""),b.inverse_brackets=function(a){for(res={},i=0;i<a.length;i++)res[a[i]]=i;return res},b.maximumMatching=function(a){var b=a[0];mm=Array(b+1);for(var c=0;b>=c;c++){mm[c]=Array(b+1);for(var d=c;b>=d;d++)mm[c][d]=0}for(var e=0,c=b-0-1;c>0;c--)for(d=c+0+1;b>=d;d++){for(var e=mm[c][d-1],f=d-0-1;f>=c;f--)a[f]===d&&(e=Math.max(e,(f>c?mm[c][f-1]:0)+1+(d-f-1>0?mm[f+1][d-1]:0)));mm[c][d]=e}return mm},b.backtrackMaximumMatching=function(a,c){var d=Array.apply(null,Array(a.length)).map(function(){return 0});return b.mm_bt(a,d,c,1,a.length-1),d},b.mm_bt=function(a,c,d,e,f){var g=a[e][f];if(!(0>f-e-1))if(a[e][f-1]==g)b.mm_bt(a,c,d,e,f-1);else{for(var h=f-0-1;h>=e;h--)if(d[f]===h&&(h>e?a[e][h-1]:0)+(f-h-1>0?a[h+1][f-1]:0)+1==g)return c[h]=f,c[f]=h,h>e&&b.mm_bt(a,c,d,e,h-1),void b.mm_bt(a,c,d,h+1,f-1);console.log("FAILED!!!"+e+","+f+": backtracking failed!")}},b.dotbracketToPairtable=function(c){for(pt=Array.apply(null,Array(c.length+1)).map(Number.prototype.valueOf,0),pt[0]=c.length,stack={},i=0;i<b.bracket_left.length;i++)stack[i]=[];for(inverse_bracket_left=b.inverse_brackets(b.bracket_left),inverse_bracket_right=b.inverse_brackets(b.bracket_right),i=0;i<c.length;i++)if(a=c[i],ni=i+1,"."==a)pt[ni]=0;else if(a in inverse_bracket_left)stack[inverse_bracket_left[a]].push(ni);else{if(!(a in inverse_bracket_right))throw"Unknown symbol in dotbracket string";j=stack[inverse_bracket_right[a]].pop(),pt[ni]=j,pt[j]=ni}for(key in stack)if(0<stack[key].length)throw"Unmatched base at position "+stack[key][0];return pt},b.insert_into_stack=function(a,b,c){for(b=0;0<a[b].length&&a[b][a[b].length-1]<c;)b+=1;return a[b].push(c),b},b.delete_from_stack=function(a,b){for(var c=0;0===a[c].length||a[c][a[c].length-1]!=b;)c+=1;return a[c].pop(),c},b.pairtableToDotbracket=function(a){for(stack={},i=0;i<a[0];i++)stack[i]=[];for(seen={},res="",i=1;i<a[0]+1;i++){if(0!==a[i]&&a[i]in seen)throw"Invalid pairtable contains duplicate entries";seen[a[i]]=!0,res=0===a[i]?res+".":a[i]>i?res+b.bracket_left[b.insert_into_stack(stack,i,a[i])]:res+b.bracket_right[b.delete_from_stack(stack,i)]}return res},b.find_unmatched=function(a,c,d){for(var e=[],f=[],g=d,h=c;d>=h;h++)0!==a[h]&&(a[h]<c||a[h]>d)&&f.push([h,a[h]]);
for(h=c;g>=h;h++){for(;0===a[h]&&g>=h;)h++;for(d=a[h];a[h]===d;)h++,d--;e=e.concat(b.find_unmatched(a,h,d))}return 0<f.length&&e.push(f),e},b.removePseudoknotsFromPairtable=function(a){for(var c=b.maximumMatching(a),c=b.backtrackMaximumMatching(c,a),d=[],e=1;e<a.length;e++)a[e]<e||c[e]==a[e]||(d.push([e,a[e]]),a[a[e]]=0,a[e]=0);return d}}var numberSort=function(a,b){return a-b};"undefined"==typeof String.prototype.trim&&(String.prototype.trim=function(){return String(this).replace(/^\s+|\s+$/g,"")}),moleculesToJson=function(a){for(var b={},c=[],d=[],e=0;e<a.molecules.length;e++){var f=a.molecules[e];for("rna"==f.type?(rg=new RNAGraph(f.seq,f.ss,f.header),rg.circularizeExternal=!0,rg.elementsToJson().addPositions("nucleotide",f.positions).addLabels().reinforceStems().reinforceLoops()):"protein"==f.type&&(rg=new ProteinGraph(f.header,f.size)),rg.addUids(f.uids),f=0;f<rg.nodes.length;f++)b[rg.nodes[f].uid]=rg.nodes[f];c.push(rg)}for(e=0;e<a.extraLinks.length;e++)link=a.extraLinks[e],link.source=b[link.source],link.target=b[link.target],link.uid=generateUUID(),d.push(link);return{graphs:c,extraLinks:d}};var number_sort=function(a,b){return a-b};rnaUtilities=new RNAUtilities,simpleXyCoordinates=function(a){var b,c,d=[],e=[];b=a[0];var f=Array.apply(null,Array(b+5)).map(Number.prototype.valueOf,0),g=Array.apply(null,Array(16+Math.floor(b/5))).map(Number.prototype.valueOf,0),h=Array.apply(null,Array(16+Math.floor(b/5))).map(Number.prototype.valueOf,0);lp=stk=0;var i=Math.PI/2;for(loop=function(a,b,c){var d,e,j,k,l,m,n,o=2,p=0,q=0,r=Array.apply(null,Array(1+2*Math.floor((b-a)/5))).map(Number.prototype.valueOf,0);for(d=a-1,b++;a!=b;)if((e=c[a])&&0!=a){o+=2,j=a,k=e,r[++p]=j,r[++p]=k,a=e+1,l=j,m=k,n=0;do j++,k--,n++;while(c[j]==k);if(e=n-2,n>=2&&(f[l+1+e]+=i,f[m-1-e]+=i,f[l]+=i,f[m]+=i,n>2))for(;e>=1;e--)f[l+e]=Math.PI,f[m-e]=Math.PI;h[++stk]=n,loop(j,k,c)}else a++,o++,q++;for(a=Math.PI*(o-2)/o,r[++p]=b,b=0>d?0:d,d=1;p>=d;d++){for(c=r[d]-b,e=0;c>=e;e++)f[b+e]+=a;if(d>p)break;b=r[++d]}g[++lp]=q},loop(0,b+1,a),g[lp]-=2,c=0,d[0]=100,e[0]=100,poss=[],poss.push([d[0],e[0]]),a=1;b>a;a++)d[a]=d[a-1]+15*Math.cos(c),e[a]=e[a-1]+15*Math.sin(c),poss.push([d[a],e[a]]),c+=Math.PI-f[a+1];return poss},angular.module("dnaApp",["ngRoute","ngDraggable"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/about",{templateUrl:"views/about.html",controller:"AboutCtrl",controllerAs:"about"}).otherwise({redirectTo:"/"})}]),angular.module("dnaApp").controller("MainCtrl",["$scope",function(a){}]),angular.module("dnaApp").factory("Graph",["$routeParams",function(a){var b=a.sequence?a.sequence:"TTGGGGGGACTGGGGCTCCCATTCGTTGCCTTTATAAATCCTTGCAAGCCAATTAACAGGTTGGTGAGGGGCTTGGGTGAAAAGGTGCTTAAGACTCCGT",c=a.structure?a.structure:"...(((((.(...).)))))........(((((.....((..(.((((((..(((.((...)).)))..)))))).).)))))))...............";return{sequence:b,structure:c,makeConnection:function(a,b){var d=c.split("");d.splice(Math.min(a,b),1,"("),d.splice(Math.max(a,b),1,")"),this.structure=d.join("")}}}]),angular.module("dnaApp").directive("sequence",["Graph",function(a){return{templateUrl:"views/sequence.html",restrict:"E",link:function(b,c,d){b.graph=a,b.$watch("graph.structure",function(c){b.nucleotides=_.map(a.sequence,function(a,b){return{base:a,construct:c[b]}})})}}}]),angular.module("dnaApp").directive("nucleotide",["Highlighter","Connector","Configuration","Graph",function(a,b,c,d){return{templateUrl:"views/nucleotide.html",restrict:"E",link:function(e,f,g){e.configuration=c,e.connector=b,e.startConnection=function(){"."==e.nucleotide.construct&&(b.connecting=!0,b.compliment={G:"C",C:"G",A:"T",T:"A"}[e.nucleotide.base])},e.makeConnection=function(a,b,c){d.makeConnection(a,c)},e.cancelConnection=function(){b.connecting=!1,b.compliment=null},e.$watch("connector.compliment",function(a){var c=a!=e.nucleotide.base||"."!=e.nucleotide.construct;e.uncomplimentary=b.connecting?c:!1}),e.highlightNucleotide=function(){a.selectedNucleotideIndex=e.$index},e.unhighlightNucleotide=function(){a.selectedNucleotideIndex=-1}}}}]),angular.module("dnaApp").factory("Configuration",function(){var a={A:"#FF0000",C:"#FF0000",G:"#FF0000",N:"#FF0000",T:"#FF0000"},b=5,c="Times",d=1;return{baseColors:a,baseRadius:b,baseFont:c,lineWidth:d}}),angular.module("dnaApp").directive("configurator",["Configuration","Graph",function(a,b){return{template:"<div></div>",restrict:"E",link:function(b,c){var d=new dat.GUI;d.addColor(a.baseColors,"A").onChange(function(a){b.$apply()}),d.addColor(a.baseColors,"C").onChange(function(a){b.$apply()}),d.addColor(a.baseColors,"G").onChange(function(a){b.$apply()}),d.addColor(a.baseColors,"N").onChange(function(a){b.$apply()}),d.addColor(a.baseColors,"T").onChange(function(a){b.$apply()}),d.add(a,"baseRadius",0,10).onChange(function(a){b.$apply()}),d.add(a,"baseFont",{Times:"times",Arial:"arial",Courier:"courier",Helvetica:"helvetica"}).onChange(function(a){b.$apply()}),d.add(a,"lineWidth",0,10).onChange(function(a){b.$apply()})}}}]),angular.module("dnaApp").directive("visualization",["Graph","Configuration","Highlighter",function(a,b,c){return{template:"<div></div>",restrict:"E",link:function(d,e,f){d.graph=a,d.$watch("graph.structure",function(){g()});var g=function(){var f=new FornaContainer(e[0],{applyForce:!0,allowPanningAndZooming:!0,labelInterval:0}),g={structure:a.structure,sequence:a.sequence},h=(f.addRNA(g.structure,g),d3.selectAll("[node_type=nucleotide]")),i=d3.selectAll("[link_type=backbone], [link_type=basepair]"),j=d3.selectAll("text");d.configuration=b,d.$watch("configuration.baseColors",function(){var a=d3.scale.ordinal().range(_.values(b.baseColors)).domain(["A","C","G","U","T"]);h.style("fill",function(b){return a(b.name)})},!0),d.$watch("configuration.baseRadius",function(a){h.attr("r",a)},!0),d.$watch("configuration.lineWidth",function(a){i.attr("stroke-width",a)},!0),d.$watch("configuration.baseFont",function(a){j.attr("class",a)},!0),d.highlighter=c,d.$watch("highlighter.selectedNucleotideIndex",function(a){a>=0?(h.style("opacity",.2),d3.select(h[0][a]).style("opacity",1)):h.style("opacity",1)}),h.on("mouseenter",function(a){c.selectedBaseIndex=a.num-1,d.$apply()}),h.on("mouseleave",function(a){c.selectedBaseIndex=-1,d.$apply()})}}}}]),angular.module("dnaApp").factory("Highlighter",function(){var a=-1,b=-1;return{selectedNucleotideIndex:a,selectedBaseIndex:b}}),angular.module("dnaApp").factory("Connector",function(){var a,b=!1;return{connecting:b,compliment:a}}),angular.module("dnaApp").run(["$templateCache",function(a){"use strict";a.put("views/main.html","<!-- the header --> <header>DNA SECONDARY STRUCTURE</header> <!-- the configurator directive --> <!-- allows the user to update base colors, radius, font and line width --> <!-- communicates changes to the Configuration service for communication to other directives --> <configurator></configurator> <!-- the sequence directive --> <!-- displays the sequence and structure --> <sequence></sequence> <!-- the visualization directive --> <!-- displays the 2D visualization --> <visualization></visualization>"),a.put("views/nucleotide.html",'<!-- the base --><!-- angular drag and drop directives from the ngDraggable module: https://github.com/fatlinesofcode/ngDraggable --><!-- drag and drop is used as the mechanism for new connections between bases --><!-- this component is repeated in the sequence directive --> <div ng-style="{\'background\':configuration.baseColors[nucleotide.base]}" ng-drag="nucleotide.construct == \'.\'" ng-drag-data="$index" ng-mousedown="startConnection()" ng-drop="nucleotide.construct == \'.\' && nucleotide.base == connector.compliment" ng-drop-success="makeConnection($data,$event,$index)" ng-drag-stop="cancelConnection()"> {{nucleotide.base}} </div> <!-- the structure construct --> <div class="construct">{{nucleotide.construct}}</div>'),a.put("views/sequence.html",'<!-- the base representation in sequence directive --><!-- angular bindings for nucleotide highlighting on hover --> <nucleotide ng-repeat="nucleotide in nucleotides track by $index" ng-class="{unhighlighted:highlighter.selectedBaseIndex >= 0 && highlighter.selectedBaseIndex != $index, uncomplimentary: uncomplimentary}" ng-mouseenter="highlightNucleotide(nucleotide, $index)" ng-mouseleave="unhighlightNucleotide()"> > </nucleotide>')}]);